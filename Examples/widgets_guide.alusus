import "Srl/String.alusus";
import "Apm.alusus";
Apm.importFile("Alusus/Gtk");
import "Build.alusus";

module WidgetGuide
{
    use Gtk;
    def window: ref[AppWindow];

    @expname[main]
    function start
    {
        def app: ref[App](App.new("org.alusus.gtk-widget-guide", 0).{
            connectSignal(Signal.ACTIVATE, Glib.cb[activate], 0, 0, 0);
        });
        def status: Int = app.exec(0, 0);
        Glib.unref(app);
    };

    function activate (app: ref[App], data: ptr)
    {
        window~no_deref = AppWindow.new(app).{
            setTitle("Alusus GTK Widgets Guide");
            setDefaultSize(640, 480);
            setTitlebar(createHeaderBar());

            add(Paned.new(Orientation.HORIZONTAL).{
                setPosition(150);
                def label: ref[Label](Label.new("Hello World!"));

                pack2(Box.new(Orientation.VERTICAL, 10).{
                    packStart(Box.new(Orientation.HORIZONTAL, 20).{
                        packStart(label, 1, 0, 0);
                        packEnd(Image.new("logo.gif"), 1, 0, 0);
                    }, 1, 0, 0);

                    packStart(Entry.new().{
                        connectSignal(Signal.CHANGED, Glib.cb[onEntryChanged], label~ptr, 0, 0);
                    }, 1, 0, 0);

                    def buffer: ref[TextBuffer](TextBuffer.new(0));

                    packStart(TextView.new(buffer).{
                        setWrapMode(WrapMode.WORD);
                    }, 1, 1, 0);

                    packStart(ButtonBox.new(Orientation.HORIZONTAL).{
                        setLayout(ButtonBoxStyle.SPREAD);
                        add(Button.newWithLabel("Say").{
                            connectSignal(Signal.CLICKED, Glib.cb[onSayClicked], buffer~ptr, 0, 0);
                        });
                        add(Button.newWithLabel("Clear").{
                            connectSignal(Signal.CLICKED, Glib.cb[onClearClicked], buffer~ptr, 0, 0);
                        });
                    }, 1, 0, 0);

                    packStart(ToggleButton.new("Toggle").{
                        connectSignal(Signal.TOGGLED, Glib.cb[onToggleChanged], label~ptr, 0, 0);
                    }, 1, 0, 0);

                    packStart(CheckButton.new("Check").{
                        connectSignal(Signal.TOGGLED, Glib.cb[onToggleChanged], label~ptr, 0, 0);
                    }, 1, 0, 0);
                }, 1, 1);
                
                pack1(ListBox.new().{
                    connectSignal(Signal.ROW_SELECTED, Glib.cb[onListBoxSelectionChanged], label~ptr, 0, 0);
                    def i: Int;
                    for i = 1, i <= 10, ++i {
                        insert(Label.new(Srl.String("Row ") + i), -1);
                    }
                }, 0, 1);
            });
            showAll();
        };
    };

    function createHeaderBar () => ref[HeaderBar]
    {
        return HeaderBar.new().{
            setTitle("Alusus GTK Widgets Guide");

            packStart(Button.newWithLabel("About").{
                connectSignal(Signal.CLICKED, Glib.cb[onAboutClicked], 0, 0, 0);
            });

            packEnd(Button.newWithLabel("Quit").{
                connectSignal(Signal.CLICKED, Glib.cb[onQuitClicked], 0, 0, 0);
            });

            packEnd(MenuButton.new().{
                setPopup(Menu.new().{
                    append(MenuItem.new("About").{
                        connectSignal(Signal.ACTIVATE, Glib.cb[onAboutClicked], 0, 0, 0);
                        show();
                    });

                    append(MenuItem.new("Quit").{
                        connectSignal(Signal.ACTIVATE, Glib.cb[onQuitClicked], 0, 0, 0);
                        show();
                    });
                });
            });
        };
    };

    function onListBoxSelectionChanged (listBox: ref[ListBox], item: ref[Bin], label: ref[Label])
    {
        label.setText(
            Srl.String("Selected item: ") +
            Label.getText(Bin.getChild(item)~ptr~cast[ptr[Label]]~cnt)
        );
    };

    function onEntryChanged (editable: ref[Editable], label: ref[Label])
    {
        label.setText(Srl.String("Entered text: ") + editable.getChars(0, -1));
    };

    function onAboutClicked (widget: ref[Widget], data: ptr)
    {
        def dialog: ref[MessageDialog](MessageDialog.new(
            window, 0, MessageType.INFO, ButtonsType.CLOSE, "Alusus GTK Widget Guide.\nauthor: Sarmad Abdullah"
        ));
        dialog.exec();
        Widget.destroy(dialog);
    };

    function onSayClicked (widget: ref[Widget], textBuffer: ref[TextBuffer])
    {
        // Get the text from the buffer.
        def text: ptr[array[Char]];
        def startIter: TextIter;
        def endIter: TextIter;
        textBuffer.getStartIter(startIter);
        textBuffer.getEndIter(endIter);
        text = textBuffer.getText(startIter, endIter, 1);

        def dialog: ref[MessageDialog](MessageDialog.new(
            window, 0, MessageType.INFO, ButtonsType.CLOSE, text
        ));
        dialog.exec();
        Widget.destroy(dialog);
    };

    function onClearClicked (widget: ref[Widget], textBuffer: ref[TextBuffer])
    {
        textBuffer.setText("", 0);
    };

    function onToggleChanged (toggle: ref[ToggleButton], label: ref[Label])
    {
        def active: Bool;
        active = toggle.getActive();
        if active label.setText("Toggle is now ON")
        else label.setText("Toggle is now OFF");
    };

    function onQuitClicked (widget: ref[Widget], data: ptr)
    {
       Widget.destroy(window);
    };
};

if Process.argCount < 3 {
    WidgetGuide.start();
} else {
    def exe: Build.Exe(WidgetGuide.start~ast, Process.args~cnt(Process.argCount - 1));
    exe.addDependency(Gtk~ast);
    if exe.generate() {
        Srl.Console.print("Build complete.\n");
    } else {
        Srl.Console.print("Build failed.\n");
    };
};
